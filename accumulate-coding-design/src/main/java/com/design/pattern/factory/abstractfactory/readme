抽象工厂模式，在工厂方法模式的基础上解决多级产品问题，比如
1、抽象工厂模式的场景：
现在有一个云厂商，提供主机、硬盘、ip、域名等云产品，且云产品要区分不同的地域，如华北、华东、华南等，客户从云厂商手中购买云产品
抽象工厂模式同工厂方法模式一样，也是由抽象工厂、具体工厂、抽象产品和具体产品等 4 个要素构成，但抽象工厂中方法个数不同，
抽象产品的个数也不同。

2、实现方式：
抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法 service()，可以创建多个不同等级的产品。
具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。
抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。
具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。

3、实现并测试
见code

4、分析
优点：
用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程。
灵活性增强，对于新产品的创建，只需多写一个相应的工厂类。
典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他实现类，满足迪米特法则、依赖倒置原则和里氏替换原则。
缺点：
类的个数容易过多，增加复杂度
增加了系统的抽象性和理解难度
抽象产品只能生产一种产品，此弊端可使用抽象工厂模式解决。

如果要新加一种产品，比如硬盘，只需要服务端提供一个硬盘的抽象工厂和硬盘的创建类即可，无需改动服务端现有
代码！！！！
5、适用场景
当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。
系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。
系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。