命令模式：Command Design Pattern

一、要解决的问题：
将方法的请求与实现进行解耦

二、定义：将一个请求封装成一个对象，使发出请求的责任和执行请求的责任分隔开，使他们通过命令
对象进行沟通，这样方便将命令对象进行存储、传递、调用、增加和管理。

三、角色分析
1、抽象命令类（Command）角色：声明执行命令的接口，提供执行命令的抽象方法execute()
2、具体命令类角色(Concrete Command)：抽象命令类的具体实现，拥有命令接受者对象（耦合关系），通过调用
接受者的功能来完成命令要执行的操作。
3、实现者/接受者（Receiver）角色：执行命令的具体功能，是具体命令对象的实现者。
4、调用者/请求者（Invoker）角色：请求的发送者，通常拥有很多的命令对象，通过访问命令对象来
这行相关的请求，不直接访问命令接受者。

四、优缺点：
1、优点：
●降低耦合度：通过引入抽象命令接口降低系统耦合度
●扩展性：删除和增加命令较方便，只需增加或删除对应的命令类即可，符合开闭原则
●实现宏命名：通过和组合模式结合，将多个命令装配成一个命令
●方便实现Undo和Redo操作：和备忘录模式结合，实现命令的撤销和恢复
●可以在现有命令的基础上，增加额外的功能，如日志记录、组合装饰器模式会更加灵活

2、缺点
●类爆炸：命令越多，需要创建的类越多（命令类、接受者类）


五、举例
智能家居中的遥控器，假设有电视、空调、冰箱、窗帘等智能家居共用一个遥控器（或APP）,
每种都有自己的命令，比如电视开关、换频道、调音量、空调开关、调温度、冰箱开关调温度、窗帘开关等，
用命令模式实现时，其角色分析如下：
●抽象命令类（或接口）AiCommand:提供execute()方法
●具体命令类
开电视OpenTvCommand、关电视CloseTvCommand、换频道ChangeChannelCommand
增加声音VolumeUpCommand、降低声音VolumeDownCommand
开空调OpenAirConditionerCommand、关空调CloseAirConditionerCommand
增加温度HeadUpCommand、降低温度CoolDownCommand
开冰箱、关冰箱、调节温度等等:实现Command接口
●命令实现者/接受者：
TvReceiver提供开电视、关电视命令
AirConditionerReceiver提供开空调、关空调命令
●调用者RemoteControl类遥控器
电视：开         关
     增加音量    降低音量
     换频道
空调：开          关
     增加温度     降低温度