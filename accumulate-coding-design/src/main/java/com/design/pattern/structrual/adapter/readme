声明：以下内容摘自http://c.biancheng.net/view/1361.html
模式的定义与特点
适配器模式（Adapter）模式的定义：指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。
它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。

该适配器模式（Adapter）的定义如下：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。适配器模式分为类结构型模式和对象结构型模式两种，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。

优点：
 客户端通过适配器可以透明地调用目标接口。
 复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类。
 将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题。
 很多业务场景中符合开闭原则。
缺点：
 适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性。
 增加代码阅读难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱。
 模式的结构与实现
 类适配器模式可采用多重继承方式实现，如 C++ 可定义一个适配器类来同时继承当前系统的业务接口和现有组件库中已经存在的组件接口；Java 不支持多继承，但可以定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。

适配器包含类适配器、对象适配器和接口适配器
适配器模式的结构
适配器模式（Adapter）包含以下主要角色。
 目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。
 适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。
 适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。

建造者模式主要适用于以下应用场景：
相同的方法，不同的执行顺序，产生不同的结果。
多个部件或零件，都可以装配到一个对象中，但是产生的结果又不相同。
产品类非常复杂，或者产品类中不同的调用顺序产生不同的作用。
初始化一个对象特别复杂，参数多，而且很多参数都具有默认值。

案例：
假如现在订单系统要对外提供一个购买某个产品的接口，并且支付方式使用用户的余额（余额保证充足），那么这个接口要完成以下几步：
1、创建一个订单（订单号）
2、查询订单价格（订单价格）
3、支付订单
4、开始发货
5、通知用户订单状态

实现方案：
产品：Order(user,orderNumber,price,status)
抽象建造者：OrderBuilder（createOrder(productId),getPrice(productId),payOrder(orderNumber),delivery(orderNumber),notice(user)）
具体建造者：实现四部方法
指挥者：即提供下单接口，用户无需感知过程，只要知道是否收到短信即可

